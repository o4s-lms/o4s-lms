/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  boolean,
  text,
  jsonb,
  numeric,
  serial,
  timestamp,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core';
import { sql, relations } from '@payloadcms/db-postgres/drizzle';
export const enum_pages_hero_links_link_type = pgEnum(
  'enum_pages_hero_links_link_type',
  ['reference', 'custom'],
);
export const enum_pages_hero_links_link_appearance = pgEnum(
  'enum_pages_hero_links_link_appearance',
  ['default', 'outline'],
);
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
);
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_cta_links_link_appearance',
  ['default', 'outline'],
);
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
);
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
);
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  'enum_pages_blocks_content_columns_link_appearance',
  ['default', 'outline'],
);
export const enum_pages_blocks_archive_populate_by = pgEnum(
  'enum_pages_blocks_archive_populate_by',
  ['collection', 'selection'],
);
export const enum_pages_blocks_archive_relation_to = pgEnum(
  'enum_pages_blocks_archive_relation_to',
  ['posts'],
);
export const enum_pages_language = pgEnum('enum_pages_language', [
  'pt',
  'en',
  'fr',
  'es',
]);
export const enum_pages_hero_type = pgEnum('enum_pages_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
]);
export const enum_pages_status = pgEnum('enum_pages_status', [
  'draft',
  'published',
]);
export const enum__pages_v_version_hero_links_link_type = pgEnum(
  'enum__pages_v_version_hero_links_link_type',
  ['reference', 'custom'],
);
export const enum__pages_v_version_hero_links_link_appearance = pgEnum(
  'enum__pages_v_version_hero_links_link_appearance',
  ['default', 'outline'],
);
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
);
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_cta_links_link_appearance',
  ['default', 'outline'],
);
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
);
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
);
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  'enum__pages_v_blocks_content_columns_link_appearance',
  ['default', 'outline'],
);
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_archive_populate_by',
  ['collection', 'selection'],
);
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  'enum__pages_v_blocks_archive_relation_to',
  ['posts'],
);
export const enum__pages_v_version_language = pgEnum(
  'enum__pages_v_version_language',
  ['pt', 'en', 'fr', 'es'],
);
export const enum__pages_v_version_hero_type = pgEnum(
  'enum__pages_v_version_hero_type',
  ['none', 'highImpact', 'mediumImpact', 'lowImpact'],
);
export const enum__pages_v_version_status = pgEnum(
  'enum__pages_v_version_status',
  ['draft', 'published'],
);
export const enum_posts_language = pgEnum('enum_posts_language', [
  'pt',
  'en',
  'fr',
  'es',
]);
export const enum_posts_status = pgEnum('enum_posts_status', [
  'draft',
  'published',
]);
export const enum__posts_v_version_language = pgEnum(
  'enum__posts_v_version_language',
  ['pt', 'en', 'fr', 'es'],
);
export const enum__posts_v_version_status = pgEnum(
  'enum__posts_v_version_status',
  ['draft', 'published'],
);
export const enum_categories_language = pgEnum('enum_categories_language', [
  'pt',
  'en',
  'fr',
  'es',
]);
export const enum_categories_status = pgEnum('enum_categories_status', [
  'draft',
  'published',
]);
export const enum__categories_v_version_language = pgEnum(
  'enum__categories_v_version_language',
  ['pt', 'en', 'fr', 'es'],
);
export const enum__categories_v_version_status = pgEnum(
  'enum__categories_v_version_status',
  ['draft', 'published'],
);
export const enum_courses_language = pgEnum('enum_courses_language', [
  'pt',
  'en',
  'fr',
  'es',
]);
export const enum_courses_status = pgEnum('enum_courses_status', [
  'draft',
  'published',
]);
export const enum__courses_v_version_language = pgEnum(
  'enum__courses_v_version_language',
  ['pt', 'en', 'fr', 'es'],
);
export const enum__courses_v_version_status = pgEnum(
  'enum__courses_v_version_status',
  ['draft', 'published'],
);
export const enum_lessons_status = pgEnum('enum_lessons_status', [
  'draft',
  'published',
]);
export const enum__lessons_v_version_status = pgEnum(
  'enum__lessons_v_version_status',
  ['draft', 'published'],
);
export const enum_course_progress_status = pgEnum(
  'enum_course_progress_status',
  ['not_started', 'in_progress', 'completed'],
);
export const enum_favorites_object_type = pgEnum('enum_favorites_object_type', [
  'lessons',
  'courses',
  'posts',
  'pages',
]);
export const enum_transactions_provider = pgEnum('enum_transactions_provider', [
  'stripe',
  'paypal',
  'transfer',
  'mbway',
]);
export const enum_transactions_status = pgEnum('enum_transactions_status', [
  'pending',
  'awaiting',
  'cancelled',
  'declined',
  'refunded',
  'disputed',
  'completed',
]);
export const enum_users_roles = pgEnum('enum_users_roles', [
  'admin',
  'user',
  'student',
  'teacher',
]);
export const enum_settings_preferences_theme = pgEnum(
  'enum_settings_preferences_theme',
  ['light', 'dark', 'system'],
);
export const enum_settings_preferences_language = pgEnum(
  'enum_settings_preferences_language',
  ['pt', 'en', 'fr', 'es'],
);
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', [
  'reference',
  'custom',
]);
export const enum_forms_confirmation_type = pgEnum(
  'enum_forms_confirmation_type',
  ['message', 'redirect'],
);
export const enum_header_nav_items_link_type = pgEnum(
  'enum_header_nav_items_link_type',
  ['reference', 'custom'],
);
export const enum_footer_pt_nav_items_link_type = pgEnum(
  'enum_footer_pt_nav_items_link_type',
  ['reference', 'custom'],
);
export const enum_footer_en_nav_items_link_type = pgEnum(
  'enum_footer_en_nav_items_link_type',
  ['reference', 'custom'],
);
export const enum_footer_fr_nav_items_link_type = pgEnum(
  'enum_footer_fr_nav_items_link_type',
  ['reference', 'custom'],
);
export const enum_footer_es_nav_items_link_type = pgEnum(
  'enum_footer_es_nav_items_link_type',
  ['reference', 'custom'],
);

export const pages_hero_links = pgTable(
  'pages_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_hero_links_link_appearance('link_appearance').default(
        'default',
      ),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_cta_links_link_appearance('link_appearance').default(
        'default',
      ),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type:
      enum_pages_blocks_content_columns_link_type('link_type').default(
        'reference',
      ),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_content_columns_link_appearance(
        'link_appearance',
      ).default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index(
      'pages_blocks_media_block_media_idx',
    ).on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy:
      enum_pages_blocks_archive_populate_by('populate_by').default(
        'collection',
      ),
    relationTo:
      enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_courses_archive = pgTable(
  'pages_blocks_courses_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_courses_archive_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('pages_blocks_courses_archive_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_courses_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_courses_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_form_block = pgTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
    pages_blocks_form_block_form_idx: index(
      'pages_blocks_form_block_form_idx',
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_testimonial_testimonials = pgTable(
  'pages_blocks_testimonial_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    username: varchar('username'),
    comment: varchar('comment'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_testimonial_testimonials_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index(
      'pages_blocks_testimonial_testimonials_parent_id_idx',
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_testimonial.id],
      name: 'pages_blocks_testimonial_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_testimonial = pgTable(
  'pages_blocks_testimonial',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richTextBefore: jsonb('rich_text_before'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_testimonial_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_testimonial_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_testimonial_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_testimonial_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_faq_faqs = pgTable(
  'pages_blocks_faq_faqs',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    question: varchar('question'),
    answer: varchar('answer'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_faq_faqs_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_faq_faqs_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_faq.id],
      name: 'pages_blocks_faq_faqs_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_faq = pgTable(
  'pages_blocks_faq',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richTextBefore: jsonb('rich_text_before'),
    richTextAfter: jsonb('rich_text_after'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_faq_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_faq_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_faq_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_faq_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    language: enum_pages_language('language').default('pt'),
    hero_type: enum_pages_hero_type('hero_type').default('lowImpact'),
    hero_richText: jsonb('hero_rich_text'),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_hero_hero_media_idx: index('pages_hero_hero_media_idx').on(
      columns.hero_media,
    ),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
);

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    categoriesID: integer('categories_id'),
    postsID: integer('posts_id'),
    coursesID: integer('courses_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(
      columns.pagesID,
    ),
    pages_rels_categories_id_idx: index('pages_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(
      columns.postsID,
    ),
    pages_rels_courses_id_idx: index('pages_rels_courses_id_idx').on(
      columns.coursesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: 'pages_rels_courses_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_version_hero_links = pgTable(
  '_pages_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_version_hero_links_link_type('link_type').default(
        'reference',
      ),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_version_hero_links_link_appearance(
        'link_appearance',
      ).default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_links_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_version_hero_links_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_cta_links_link_type('link_type').default(
        'reference',
      ),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_cta_links_link_appearance('link_appearance').default(
        'default',
      ),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type:
      enum__pages_v_blocks_content_columns_link_type('link_type').default(
        'reference',
      ),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance(
        'link_appearance',
      ).default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index(
      '_pages_v_blocks_media_block_media_idx',
    ).on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy:
      enum__pages_v_blocks_archive_populate_by('populate_by').default(
        'collection',
      ),
    relationTo:
      enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_courses_archive = pgTable(
  '_pages_v_blocks_courses_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_courses_archive_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_courses_archive_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_courses_archive_path_idx').on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_courses_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_form_block = pgTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    _pages_v_blocks_form_block_form_idx: index(
      '_pages_v_blocks_form_block_form_idx',
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_testimonial_testimonials = pgTable(
  '_pages_v_blocks_testimonial_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    name: varchar('name'),
    username: varchar('username'),
    comment: varchar('comment'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_testimonial_testimonials_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index(
      '_pages_v_blocks_testimonial_testimonials_parent_id_idx',
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_testimonial.id],
      name: '_pages_v_blocks_testimonial_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_testimonial = pgTable(
  '_pages_v_blocks_testimonial',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richTextBefore: jsonb('rich_text_before'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_testimonial_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_testimonial_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_testimonial_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_testimonial_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_faq_faqs = pgTable(
  '_pages_v_blocks_faq_faqs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    question: varchar('question'),
    answer: varchar('answer'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_faq_faqs_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_faq_faqs_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_faq.id],
      name: '_pages_v_blocks_faq_faqs_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_faq = pgTable(
  '_pages_v_blocks_faq',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richTextBefore: jsonb('rich_text_before'),
    richTextAfter: jsonb('rich_text_after'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_faq_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_faq_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_faq_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_faq_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_language:
      enum__pages_v_version_language('version_language').default('pt'),
    version_hero_type:
      enum__pages_v_version_hero_type('version_hero_type').default('lowImpact'),
    version_hero_richText: jsonb('version_hero_rich_text'),
    version_hero_media: integer('version_hero_media_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_hero_version_hero_media_idx: index(
      '_pages_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index(
      '_pages_v_version_version_slug_idx',
    ).on(columns.version_slug),
    _pages_v_version_version_updated_at_idx: index(
      '_pages_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _pages_v_version_version_created_at_idx: index(
      '_pages_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _pages_v_version_version__status_idx: index(
      '_pages_v_version_version__status_idx',
    ).on(columns.version__status),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(
      columns.createdAt,
    ),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
);

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    categoriesID: integer('categories_id'),
    postsID: integer('posts_id'),
    coursesID: integer('courses_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(
      columns.pagesID,
    ),
    _pages_v_rels_categories_id_idx: index(
      '_pages_v_rels_categories_id_idx',
    ).on(columns.categoriesID),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(
      columns.postsID,
    ),
    _pages_v_rels_courses_id_idx: index('_pages_v_rels_courses_id_idx').on(
      columns.coursesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: '_pages_v_rels_courses_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    language: enum_posts_language('language').default('pt'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_hero_image_idx: index('posts_hero_image_idx').on(columns.heroImage),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
);

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(
      columns.postsID,
    ),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_language:
      enum__posts_v_version_language('version_language').default('pt'),
    version_heroImage: integer('version_hero_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_hero_image_idx: index(
      '_posts_v_version_version_hero_image_idx',
    ).on(columns.version_heroImage),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index(
      '_posts_v_version_version_slug_idx',
    ).on(columns.version_slug),
    _posts_v_version_version_updated_at_idx: index(
      '_posts_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _posts_v_version_version_created_at_idx: index(
      '_posts_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _posts_v_version_version__status_idx: index(
      '_posts_v_version_version__status_idx',
    ).on(columns.version__status),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(
      columns.createdAt,
    ),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
);

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(
      columns.postsID,
    ),
    _posts_v_rels_categories_id_idx: index(
      '_posts_v_rels_categories_id_idx',
    ).on(columns.categoriesID),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index(
      'media_sizes_og_sizes_og_filename_idx',
    ).on(columns.sizes_og_filename),
  }),
);

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(
      columns._parentID,
    ),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(
      columns.doc,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    language: enum_categories_language('language').default('pt'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_categories_status('_status').default('draft'),
  },
  (columns) => ({
    categories_hero_image_idx: index('categories_hero_image_idx').on(
      columns.heroImage,
    ),
    categories_meta_meta_image_idx: index('categories_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    categories_slug_idx: index('categories_slug_idx').on(columns.slug),
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_updated_at_idx: index('categories_updated_at_idx').on(
      columns.updatedAt,
    ),
    categories_created_at_idx: index('categories_created_at_idx').on(
      columns.createdAt,
    ),
    categories__status_idx: index('categories__status_idx').on(columns._status),
  }),
);

export const _categories_v_version_breadcrumbs = pgTable(
  '_categories_v_version_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_categories_v_version_breadcrumbs_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_categories_v_version_breadcrumbs_parent_id_idx').on(
      columns._parentID,
    ),
    _categories_v_version_breadcrumbs_doc_idx: index(
      '_categories_v_version_breadcrumbs_doc_idx',
    ).on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_categories_v.id],
      name: '_categories_v_version_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _categories_v = pgTable(
  '_categories_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_language:
      enum__categories_v_version_language('version_language').default('pt'),
    version_heroImage: integer('version_hero_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_parent: integer('version_parent_id').references(
      () => categories.id,
      {
        onDelete: 'set null',
      },
    ),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__categories_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _categories_v_parent_idx: index('_categories_v_parent_idx').on(
      columns.parent,
    ),
    _categories_v_version_version_hero_image_idx: index(
      '_categories_v_version_version_hero_image_idx',
    ).on(columns.version_heroImage),
    _categories_v_version_meta_version_meta_image_idx: index(
      '_categories_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _categories_v_version_version_slug_idx: index(
      '_categories_v_version_version_slug_idx',
    ).on(columns.version_slug),
    _categories_v_version_version_parent_idx: index(
      '_categories_v_version_version_parent_idx',
    ).on(columns.version_parent),
    _categories_v_version_version_updated_at_idx: index(
      '_categories_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _categories_v_version_version_created_at_idx: index(
      '_categories_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _categories_v_version_version__status_idx: index(
      '_categories_v_version_version__status_idx',
    ).on(columns.version__status),
    _categories_v_created_at_idx: index('_categories_v_created_at_idx').on(
      columns.createdAt,
    ),
    _categories_v_updated_at_idx: index('_categories_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _categories_v_latest_idx: index('_categories_v_latest_idx').on(
      columns.latest,
    ),
    _categories_v_autosave_idx: index('_categories_v_autosave_idx').on(
      columns.autosave,
    ),
  }),
);

export const courses_populated_authors = pgTable(
  'courses_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('courses_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('courses_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [courses.id],
      name: 'courses_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const courses = pgTable(
  'courses',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    price: numeric('price'),
    badgeImage: integer('badge_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    language: enum_courses_language('language').default('pt'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_courses_status('_status').default('draft'),
  },
  (columns) => ({
    courses_badge_image_idx: index('courses_badge_image_idx').on(
      columns.badgeImage,
    ),
    courses_hero_image_idx: index('courses_hero_image_idx').on(
      columns.heroImage,
    ),
    courses_meta_meta_image_idx: index('courses_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    courses_slug_idx: index('courses_slug_idx').on(columns.slug),
    courses_updated_at_idx: index('courses_updated_at_idx').on(
      columns.updatedAt,
    ),
    courses_created_at_idx: index('courses_created_at_idx').on(
      columns.createdAt,
    ),
    courses__status_idx: index('courses__status_idx').on(columns._status),
  }),
);

export const courses_rels = pgTable(
  'courses_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    modulesID: integer('modules_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('courses_rels_order_idx').on(columns.order),
    parentIdx: index('courses_rels_parent_idx').on(columns.parent),
    pathIdx: index('courses_rels_path_idx').on(columns.path),
    courses_rels_modules_id_idx: index('courses_rels_modules_id_idx').on(
      columns.modulesID,
    ),
    courses_rels_users_id_idx: index('courses_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [courses.id],
      name: 'courses_rels_parent_fk',
    }).onDelete('cascade'),
    modulesIdFk: foreignKey({
      columns: [columns['modulesID']],
      foreignColumns: [modules.id],
      name: 'courses_rels_modules_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'courses_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const _courses_v_version_populated_authors = pgTable(
  '_courses_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_courses_v_version_populated_authors_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index(
      '_courses_v_version_populated_authors_parent_id_idx',
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_courses_v.id],
      name: '_courses_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _courses_v = pgTable(
  '_courses_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => courses.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_price: numeric('version_price'),
    version_badgeImage: integer('version_badge_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_language:
      enum__courses_v_version_language('version_language').default('pt'),
    version_heroImage: integer('version_hero_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__courses_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _courses_v_parent_idx: index('_courses_v_parent_idx').on(columns.parent),
    _courses_v_version_version_badge_image_idx: index(
      '_courses_v_version_version_badge_image_idx',
    ).on(columns.version_badgeImage),
    _courses_v_version_version_hero_image_idx: index(
      '_courses_v_version_version_hero_image_idx',
    ).on(columns.version_heroImage),
    _courses_v_version_meta_version_meta_image_idx: index(
      '_courses_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _courses_v_version_version_slug_idx: index(
      '_courses_v_version_version_slug_idx',
    ).on(columns.version_slug),
    _courses_v_version_version_updated_at_idx: index(
      '_courses_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _courses_v_version_version_created_at_idx: index(
      '_courses_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _courses_v_version_version__status_idx: index(
      '_courses_v_version_version__status_idx',
    ).on(columns.version__status),
    _courses_v_created_at_idx: index('_courses_v_created_at_idx').on(
      columns.createdAt,
    ),
    _courses_v_updated_at_idx: index('_courses_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _courses_v_latest_idx: index('_courses_v_latest_idx').on(columns.latest),
    _courses_v_autosave_idx: index('_courses_v_autosave_idx').on(
      columns.autosave,
    ),
  }),
);

export const _courses_v_rels = pgTable(
  '_courses_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    modulesID: integer('modules_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_courses_v_rels_order_idx').on(columns.order),
    parentIdx: index('_courses_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_courses_v_rels_path_idx').on(columns.path),
    _courses_v_rels_modules_id_idx: index('_courses_v_rels_modules_id_idx').on(
      columns.modulesID,
    ),
    _courses_v_rels_users_id_idx: index('_courses_v_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_courses_v.id],
      name: '_courses_v_rels_parent_fk',
    }).onDelete('cascade'),
    modulesIdFk: foreignKey({
      columns: [columns['modulesID']],
      foreignColumns: [modules.id],
      name: '_courses_v_rels_modules_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_courses_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const modules = pgTable(
  'modules',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    richText: jsonb('rich_text'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    modules_slug_idx: index('modules_slug_idx').on(columns.slug),
    modules_updated_at_idx: index('modules_updated_at_idx').on(
      columns.updatedAt,
    ),
    modules_created_at_idx: index('modules_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const modules_rels = pgTable(
  'modules_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    coursesID: integer('courses_id'),
    lessonsID: integer('lessons_id'),
  },
  (columns) => ({
    order: index('modules_rels_order_idx').on(columns.order),
    parentIdx: index('modules_rels_parent_idx').on(columns.parent),
    pathIdx: index('modules_rels_path_idx').on(columns.path),
    modules_rels_courses_id_idx: index('modules_rels_courses_id_idx').on(
      columns.coursesID,
    ),
    modules_rels_lessons_id_idx: index('modules_rels_lessons_id_idx').on(
      columns.lessonsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [modules.id],
      name: 'modules_rels_parent_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: 'modules_rels_courses_fk',
    }).onDelete('cascade'),
    lessonsIdFk: foreignKey({
      columns: [columns['lessonsID']],
      foreignColumns: [lessons.id],
      name: 'modules_rels_lessons_fk',
    }).onDelete('cascade'),
  }),
);

export const lessons_populated_authors = pgTable(
  'lessons_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('lessons_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('lessons_populated_authors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [lessons.id],
      name: 'lessons_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const lessons = pgTable(
  'lessons',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    activity: boolean('activity').default(false),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    course: integer('course_id').references(() => courses.id, {
      onDelete: 'set null',
    }),
    module: integer('module_id').references(() => modules.id, {
      onDelete: 'set null',
    }),
    publishedAt: timestamp('published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_lessons_status('_status').default('draft'),
  },
  (columns) => ({
    lessons_meta_meta_image_idx: index('lessons_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    lessons_course_idx: index('lessons_course_idx').on(columns.course),
    lessons_module_idx: index('lessons_module_idx').on(columns.module),
    lessons_slug_idx: index('lessons_slug_idx').on(columns.slug),
    lessons_updated_at_idx: index('lessons_updated_at_idx').on(
      columns.updatedAt,
    ),
    lessons_created_at_idx: index('lessons_created_at_idx').on(
      columns.createdAt,
    ),
    lessons__status_idx: index('lessons__status_idx').on(columns._status),
  }),
);

export const lessons_rels = pgTable(
  'lessons_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('lessons_rels_order_idx').on(columns.order),
    parentIdx: index('lessons_rels_parent_idx').on(columns.parent),
    pathIdx: index('lessons_rels_path_idx').on(columns.path),
    lessons_rels_users_id_idx: index('lessons_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [lessons.id],
      name: 'lessons_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'lessons_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const _lessons_v_version_populated_authors = pgTable(
  '_lessons_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_lessons_v_version_populated_authors_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index(
      '_lessons_v_version_populated_authors_parent_id_idx',
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_lessons_v.id],
      name: '_lessons_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _lessons_v = pgTable(
  '_lessons_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => lessons.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_activity: boolean('version_activity').default(false),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_meta_description: varchar('version_meta_description'),
    version_course: integer('version_course_id').references(() => courses.id, {
      onDelete: 'set null',
    }),
    version_module: integer('version_module_id').references(() => modules.id, {
      onDelete: 'set null',
    }),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__lessons_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _lessons_v_parent_idx: index('_lessons_v_parent_idx').on(columns.parent),
    _lessons_v_version_meta_version_meta_image_idx: index(
      '_lessons_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _lessons_v_version_version_course_idx: index(
      '_lessons_v_version_version_course_idx',
    ).on(columns.version_course),
    _lessons_v_version_version_module_idx: index(
      '_lessons_v_version_version_module_idx',
    ).on(columns.version_module),
    _lessons_v_version_version_slug_idx: index(
      '_lessons_v_version_version_slug_idx',
    ).on(columns.version_slug),
    _lessons_v_version_version_updated_at_idx: index(
      '_lessons_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _lessons_v_version_version_created_at_idx: index(
      '_lessons_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _lessons_v_version_version__status_idx: index(
      '_lessons_v_version_version__status_idx',
    ).on(columns.version__status),
    _lessons_v_created_at_idx: index('_lessons_v_created_at_idx').on(
      columns.createdAt,
    ),
    _lessons_v_updated_at_idx: index('_lessons_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _lessons_v_latest_idx: index('_lessons_v_latest_idx').on(columns.latest),
    _lessons_v_autosave_idx: index('_lessons_v_autosave_idx').on(
      columns.autosave,
    ),
  }),
);

export const _lessons_v_rels = pgTable(
  '_lessons_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_lessons_v_rels_order_idx').on(columns.order),
    parentIdx: index('_lessons_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_lessons_v_rels_path_idx').on(columns.path),
    _lessons_v_rels_users_id_idx: index('_lessons_v_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_lessons_v.id],
      name: '_lessons_v_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_lessons_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const course_progress = pgTable(
  'course_progress',
  {
    id: serial('id').primaryKey(),
    status: enum_course_progress_status('status')
      .notNull()
      .default('not_started'),
    enrollmentDate: timestamp('enrollment_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    overallProgress: numeric('overall_progress').notNull().default('0'),
    lastAccessed: timestamp('last_accessed', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    course_progress_updated_at_idx: index('course_progress_updated_at_idx').on(
      columns.updatedAt,
    ),
    course_progress_created_at_idx: index('course_progress_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const course_progress_rels = pgTable(
  'course_progress_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    coursesID: integer('courses_id'),
    'module-progressID': integer('module_progress_id'),
    lessonsID: integer('lessons_id'),
  },
  (columns) => ({
    order: index('course_progress_rels_order_idx').on(columns.order),
    parentIdx: index('course_progress_rels_parent_idx').on(columns.parent),
    pathIdx: index('course_progress_rels_path_idx').on(columns.path),
    course_progress_rels_users_id_idx: index(
      'course_progress_rels_users_id_idx',
    ).on(columns.usersID),
    course_progress_rels_courses_id_idx: index(
      'course_progress_rels_courses_id_idx',
    ).on(columns.coursesID),
    course_progress_rels_module_progress_id_idx: index(
      'course_progress_rels_module_progress_id_idx',
    ).on(columns['module-progressID']),
    course_progress_rels_lessons_id_idx: index(
      'course_progress_rels_lessons_id_idx',
    ).on(columns.lessonsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [course_progress.id],
      name: 'course_progress_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'course_progress_rels_users_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: 'course_progress_rels_courses_fk',
    }).onDelete('cascade'),
    'module-progressIdFk': foreignKey({
      columns: [columns['module-progressID']],
      foreignColumns: [module_progress.id],
      name: 'course_progress_rels_module_progress_fk',
    }).onDelete('cascade'),
    lessonsIdFk: foreignKey({
      columns: [columns['lessonsID']],
      foreignColumns: [lessons.id],
      name: 'course_progress_rels_lessons_fk',
    }).onDelete('cascade'),
  }),
);

export const module_progress = pgTable(
  'module_progress',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    module_progress_updated_at_idx: index('module_progress_updated_at_idx').on(
      columns.updatedAt,
    ),
    module_progress_created_at_idx: index('module_progress_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const module_progress_rels = pgTable(
  'module_progress_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    modulesID: integer('modules_id'),
    'lesson-progressID': integer('lesson_progress_id'),
  },
  (columns) => ({
    order: index('module_progress_rels_order_idx').on(columns.order),
    parentIdx: index('module_progress_rels_parent_idx').on(columns.parent),
    pathIdx: index('module_progress_rels_path_idx').on(columns.path),
    module_progress_rels_modules_id_idx: index(
      'module_progress_rels_modules_id_idx',
    ).on(columns.modulesID),
    module_progress_rels_lesson_progress_id_idx: index(
      'module_progress_rels_lesson_progress_id_idx',
    ).on(columns['lesson-progressID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [module_progress.id],
      name: 'module_progress_rels_parent_fk',
    }).onDelete('cascade'),
    modulesIdFk: foreignKey({
      columns: [columns['modulesID']],
      foreignColumns: [modules.id],
      name: 'module_progress_rels_modules_fk',
    }).onDelete('cascade'),
    'lesson-progressIdFk': foreignKey({
      columns: [columns['lesson-progressID']],
      foreignColumns: [lesson_progress.id],
      name: 'module_progress_rels_lesson_progress_fk',
    }).onDelete('cascade'),
  }),
);

export const lesson_progress = pgTable(
  'lesson_progress',
  {
    id: serial('id').primaryKey(),
    completed: boolean('completed').default(false),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    lesson_progress_updated_at_idx: index('lesson_progress_updated_at_idx').on(
      columns.updatedAt,
    ),
    lesson_progress_created_at_idx: index('lesson_progress_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const lesson_progress_rels = pgTable(
  'lesson_progress_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    lessonsID: integer('lessons_id'),
  },
  (columns) => ({
    order: index('lesson_progress_rels_order_idx').on(columns.order),
    parentIdx: index('lesson_progress_rels_parent_idx').on(columns.parent),
    pathIdx: index('lesson_progress_rels_path_idx').on(columns.path),
    lesson_progress_rels_lessons_id_idx: index(
      'lesson_progress_rels_lessons_id_idx',
    ).on(columns.lessonsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [lesson_progress.id],
      name: 'lesson_progress_rels_parent_fk',
    }).onDelete('cascade'),
    lessonsIdFk: foreignKey({
      columns: [columns['lessonsID']],
      foreignColumns: [lessons.id],
      name: 'lesson_progress_rels_lessons_fk',
    }).onDelete('cascade'),
  }),
);

export const favorites = pgTable(
  'favorites',
  {
    id: serial('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    objectType: enum_favorites_object_type('object_type')
      .notNull()
      .default('lessons'),
    objectId: numeric('object_id').notNull(),
    title: varchar('title').notNull(),
    url: varchar('url'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    favorites_user_idx: index('favorites_user_idx').on(columns.user),
    favorites_updated_at_idx: index('favorites_updated_at_idx').on(
      columns.updatedAt,
    ),
    favorites_created_at_idx: index('favorites_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const transactions = pgTable(
  'transactions',
  {
    id: serial('id').primaryKey(),
    email: varchar('email').notNull(),
    orderId: varchar('order_id'),
    customerId: varchar('customer_id'),
    transactionId: varchar('transaction_id'),
    provider: enum_transactions_provider('provider')
      .notNull()
      .default('paypal'),
    amount: numeric('amount').notNull().default('0'),
    discount: numeric('discount').notNull().default('0'),
    tax: numeric('tax').notNull().default('0'),
    total: numeric('total').notNull().default('0'),
    status: enum_transactions_status('status').notNull().default('pending'),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    transactions_email_idx: index('transactions_email_idx').on(columns.email),
    transactions_user_idx: index('transactions_user_idx').on(columns.user),
    transactions_updated_at_idx: index('transactions_updated_at_idx').on(
      columns.updatedAt,
    ),
    transactions_created_at_idx: index('transactions_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const transactions_rels = pgTable(
  'transactions_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    coursesID: integer('courses_id'),
  },
  (columns) => ({
    order: index('transactions_rels_order_idx').on(columns.order),
    parentIdx: index('transactions_rels_parent_idx').on(columns.parent),
    pathIdx: index('transactions_rels_path_idx').on(columns.path),
    transactions_rels_courses_id_idx: index(
      'transactions_rels_courses_id_idx',
    ).on(columns.coursesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [transactions.id],
      name: 'transactions_rels_parent_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: 'transactions_rels_courses_fk',
    }).onDelete('cascade'),
  }),
);

export const newsletter_signups = pgTable(
  'newsletter_signups',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    email: varchar('email').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    newsletter_signups_updated_at_idx: index(
      'newsletter_signups_updated_at_idx',
    ).on(columns.updatedAt),
    newsletter_signups_created_at_idx: index(
      'newsletter_signups_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const users_roles = pgTable(
  'users_roles',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_users_roles('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('users_roles_order_idx').on(columns.order),
    parentIdx: index('users_roles_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_roles_parent_fk',
    }).onDelete('cascade'),
  }),
);

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    avatar: integer('avatar_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    settings: integer('settings_id').references(() => settings.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    _verified: boolean('_verified'),
    _verificationToken: varchar('_verificationtoken'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_avatar_idx: index('users_avatar_idx').on(columns.avatar),
    users_settings_idx: index('users_settings_idx').on(columns.settings),
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
);

export const settings = pgTable(
  'settings',
  {
    id: serial('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    preferences_theme:
      enum_settings_preferences_theme('preferences_theme').default('system'),
    preferences_language: enum_settings_preferences_language(
      'preferences_language',
    )
      .notNull()
      .default('pt'),
    preferences_emailNotifications_assignments: boolean(
      'preferences_email_notifications_assignments',
    ).default(true),
    preferences_emailNotifications_courseUpdates: boolean(
      'preferences_email_notifications_course_updates',
    ).default(true),
    preferences_emailNotifications_achievements: boolean(
      'preferences_email_notifications_achievements',
    ).default(true),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    settings_user_idx: uniqueIndex('settings_user_idx').on(columns.user),
    settings_updated_at_idx: index('settings_updated_at_idx').on(
      columns.updatedAt,
    ),
    settings_created_at_idx: index('settings_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: index('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(
      columns.updatedAt,
    ),
    redirects_created_at_idx: index('redirects_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    coursesID: integer('courses_id'),
    lessonsID: integer('lessons_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(
      columns.pagesID,
    ),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(
      columns.postsID,
    ),
    redirects_rels_courses_id_idx: index('redirects_rels_courses_id_idx').on(
      columns.coursesID,
    ),
    redirects_rels_lessons_id_idx: index('redirects_rels_lessons_id_idx').on(
      columns.lessonsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: 'redirects_rels_courses_fk',
    }).onDelete('cascade'),
    lessonsIdFk: foreignKey({
      columns: [columns['lessonsID']],
      foreignColumns: [lessons.id],
      name: 'redirects_rels_lessons_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject')
      .notNull()
      .default("You''ve received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType:
      enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
);

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(
      columns.form,
    ),
    form_submissions_updated_at_idx: index(
      'form_submissions_updated_at_idx',
    ).on(columns.updatedAt),
    form_submissions_created_at_idx: index(
      'form_submissions_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
);

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(
      columns.postsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      'payload_locked_documents_global_slug_idx',
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      'payload_locked_documents_updated_at_idx',
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      'payload_locked_documents_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
    coursesID: integer('courses_id'),
    modulesID: integer('modules_id'),
    lessonsID: integer('lessons_id'),
    'course-progressID': integer('course_progress_id'),
    'module-progressID': integer('module_progress_id'),
    'lesson-progressID': integer('lesson_progress_id'),
    favoritesID: integer('favorites_id'),
    transactionsID: integer('transactions_id'),
    'newsletter-signupsID': integer('newsletter_signups_id'),
    usersID: integer('users_id'),
    settingsID: integer('settings_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(
      columns.parent,
    ),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_courses_id_idx: index(
      'payload_locked_documents_rels_courses_id_idx',
    ).on(columns.coursesID),
    payload_locked_documents_rels_modules_id_idx: index(
      'payload_locked_documents_rels_modules_id_idx',
    ).on(columns.modulesID),
    payload_locked_documents_rels_lessons_id_idx: index(
      'payload_locked_documents_rels_lessons_id_idx',
    ).on(columns.lessonsID),
    payload_locked_documents_rels_course_progress_id_idx: index(
      'payload_locked_documents_rels_course_progress_id_idx',
    ).on(columns['course-progressID']),
    payload_locked_documents_rels_module_progress_id_idx: index(
      'payload_locked_documents_rels_module_progress_id_idx',
    ).on(columns['module-progressID']),
    payload_locked_documents_rels_lesson_progress_id_idx: index(
      'payload_locked_documents_rels_lesson_progress_id_idx',
    ).on(columns['lesson-progressID']),
    payload_locked_documents_rels_favorites_id_idx: index(
      'payload_locked_documents_rels_favorites_id_idx',
    ).on(columns.favoritesID),
    payload_locked_documents_rels_transactions_id_idx: index(
      'payload_locked_documents_rels_transactions_id_idx',
    ).on(columns.transactionsID),
    payload_locked_documents_rels_newsletter_signups_id_idx: index(
      'payload_locked_documents_rels_newsletter_signups_id_idx',
    ).on(columns['newsletter-signupsID']),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_settings_id_idx: index(
      'payload_locked_documents_rels_settings_id_idx',
    ).on(columns.settingsID),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    coursesIdFk: foreignKey({
      columns: [columns['coursesID']],
      foreignColumns: [courses.id],
      name: 'payload_locked_documents_rels_courses_fk',
    }).onDelete('cascade'),
    modulesIdFk: foreignKey({
      columns: [columns['modulesID']],
      foreignColumns: [modules.id],
      name: 'payload_locked_documents_rels_modules_fk',
    }).onDelete('cascade'),
    lessonsIdFk: foreignKey({
      columns: [columns['lessonsID']],
      foreignColumns: [lessons.id],
      name: 'payload_locked_documents_rels_lessons_fk',
    }).onDelete('cascade'),
    'course-progressIdFk': foreignKey({
      columns: [columns['course-progressID']],
      foreignColumns: [course_progress.id],
      name: 'payload_locked_documents_rels_course_progress_fk',
    }).onDelete('cascade'),
    'module-progressIdFk': foreignKey({
      columns: [columns['module-progressID']],
      foreignColumns: [module_progress.id],
      name: 'payload_locked_documents_rels_module_progress_fk',
    }).onDelete('cascade'),
    'lesson-progressIdFk': foreignKey({
      columns: [columns['lesson-progressID']],
      foreignColumns: [lesson_progress.id],
      name: 'payload_locked_documents_rels_lesson_progress_fk',
    }).onDelete('cascade'),
    favoritesIdFk: foreignKey({
      columns: [columns['favoritesID']],
      foreignColumns: [favorites.id],
      name: 'payload_locked_documents_rels_favorites_fk',
    }).onDelete('cascade'),
    transactionsIdFk: foreignKey({
      columns: [columns['transactionsID']],
      foreignColumns: [transactions.id],
      name: 'payload_locked_documents_rels_transactions_fk',
    }).onDelete('cascade'),
    'newsletter-signupsIdFk': foreignKey({
      columns: [columns['newsletter-signupsID']],
      foreignColumns: [newsletter_signups.id],
      name: 'payload_locked_documents_rels_newsletter_signups_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    settingsIdFk: foreignKey({
      columns: [columns['settingsID']],
      foreignColumns: [settings.id],
      name: 'payload_locked_documents_rels_settings_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      'payload_preferences_updated_at_idx',
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      'payload_preferences_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      'payload_preferences_rels_users_id_idx',
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      'payload_migrations_updated_at_idx',
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      'payload_migrations_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp('created_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
});

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(
      columns.pagesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
  }),
);

export const footer_pt_nav_items = pgTable(
  'footer_pt_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_footer_pt_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_pt_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_pt_nav_items_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer_pt.id],
      name: 'footer_pt_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const footer_pt = pgTable('footer_pt', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp('created_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
});

export const footer_pt_rels = pgTable(
  'footer_pt_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('footer_pt_rels_order_idx').on(columns.order),
    parentIdx: index('footer_pt_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_pt_rels_path_idx').on(columns.path),
    footer_pt_rels_pages_id_idx: index('footer_pt_rels_pages_id_idx').on(
      columns.pagesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer_pt.id],
      name: 'footer_pt_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_pt_rels_pages_fk',
    }).onDelete('cascade'),
  }),
);

export const footer_en_nav_items = pgTable(
  'footer_en_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_footer_en_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_en_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_en_nav_items_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer_en.id],
      name: 'footer_en_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const footer_en = pgTable('footer_en', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp('created_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
});

export const footer_en_rels = pgTable(
  'footer_en_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('footer_en_rels_order_idx').on(columns.order),
    parentIdx: index('footer_en_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_en_rels_path_idx').on(columns.path),
    footer_en_rels_pages_id_idx: index('footer_en_rels_pages_id_idx').on(
      columns.pagesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer_en.id],
      name: 'footer_en_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_en_rels_pages_fk',
    }).onDelete('cascade'),
  }),
);

export const footer_fr_nav_items = pgTable(
  'footer_fr_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_footer_fr_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_fr_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_fr_nav_items_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer_fr.id],
      name: 'footer_fr_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const footer_fr = pgTable('footer_fr', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp('created_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
});

export const footer_fr_rels = pgTable(
  'footer_fr_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('footer_fr_rels_order_idx').on(columns.order),
    parentIdx: index('footer_fr_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_fr_rels_path_idx').on(columns.path),
    footer_fr_rels_pages_id_idx: index('footer_fr_rels_pages_id_idx').on(
      columns.pagesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer_fr.id],
      name: 'footer_fr_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_fr_rels_pages_fk',
    }).onDelete('cascade'),
  }),
);

export const footer_es_nav_items = pgTable(
  'footer_es_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_footer_es_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_es_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_es_nav_items_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer_es.id],
      name: 'footer_es_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const footer_es = pgTable('footer_es', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp('created_at', {
    mode: 'string',
    withTimezone: true,
    precision: 3,
  }),
});

export const footer_es_rels = pgTable(
  'footer_es_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('footer_es_rels_order_idx').on(columns.order),
    parentIdx: index('footer_es_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_es_rels_path_idx').on(columns.path),
    footer_es_rels_pages_id_idx: index('footer_es_rels_pages_id_idx').on(
      columns.pagesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer_es.id],
      name: 'footer_es_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_es_rels_pages_fk',
    }).onDelete('cascade'),
  }),
);

export const relations_pages_hero_links = relations(
  pages_hero_links,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_hero_links._parentID],
      references: [pages.id],
      relationName: 'hero_links',
    }),
  }),
);
export const relations_pages_blocks_cta_links = relations(
  pages_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_cta, {
      fields: [pages_blocks_cta_links._parentID],
      references: [pages_blocks_cta.id],
      relationName: 'links',
    }),
  }),
);
export const relations_pages_blocks_cta = relations(
  pages_blocks_cta,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_cta._parentID],
      references: [pages.id],
      relationName: '_blocks_cta',
    }),
    links: many(pages_blocks_cta_links, {
      relationName: 'links',
    }),
  }),
);
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
);
export const relations_pages_blocks_content = relations(
  pages_blocks_content,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_content._parentID],
      references: [pages.id],
      relationName: '_blocks_content',
    }),
    columns: many(pages_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
);
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
);
export const relations_pages_blocks_archive = relations(
  pages_blocks_archive,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_archive._parentID],
      references: [pages.id],
      relationName: '_blocks_archive',
    }),
  }),
);
export const relations_pages_blocks_courses_archive = relations(
  pages_blocks_courses_archive,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_courses_archive._parentID],
      references: [pages.id],
      relationName: '_blocks_coursesArchive',
    }),
  }),
);
export const relations_pages_blocks_form_block = relations(
  pages_blocks_form_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_form_block._parentID],
      references: [pages.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [pages_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
);
export const relations_pages_blocks_testimonial_testimonials = relations(
  pages_blocks_testimonial_testimonials,
  ({ one }) => ({
    _parentID: one(pages_blocks_testimonial, {
      fields: [pages_blocks_testimonial_testimonials._parentID],
      references: [pages_blocks_testimonial.id],
      relationName: 'testimonials',
    }),
  }),
);
export const relations_pages_blocks_testimonial = relations(
  pages_blocks_testimonial,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_testimonial._parentID],
      references: [pages.id],
      relationName: '_blocks_testimonial',
    }),
    testimonials: many(pages_blocks_testimonial_testimonials, {
      relationName: 'testimonials',
    }),
  }),
);
export const relations_pages_blocks_faq_faqs = relations(
  pages_blocks_faq_faqs,
  ({ one }) => ({
    _parentID: one(pages_blocks_faq, {
      fields: [pages_blocks_faq_faqs._parentID],
      references: [pages_blocks_faq.id],
      relationName: 'faqs',
    }),
  }),
);
export const relations_pages_blocks_faq = relations(
  pages_blocks_faq,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_faq._parentID],
      references: [pages.id],
      relationName: '_blocks_faq',
    }),
    faqs: many(pages_blocks_faq_faqs, {
      relationName: 'faqs',
    }),
  }),
);
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  coursesID: one(courses, {
    fields: [pages_rels.coursesID],
    references: [courses.id],
    relationName: 'courses',
  }),
}));
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: 'hero_links',
  }),
  hero_media: one(media, {
    fields: [pages.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_coursesArchive: many(pages_blocks_courses_archive, {
    relationName: '_blocks_coursesArchive',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  _blocks_testimonial: many(pages_blocks_testimonial, {
    relationName: '_blocks_testimonial',
  }),
  _blocks_faq: many(pages_blocks_faq, {
    relationName: '_blocks_faq',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}));
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_links',
    }),
  }),
);
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
);
export const relations__pages_v_blocks_cta = relations(
  _pages_v_blocks_cta,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_cta._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_cta',
    }),
    links: many(_pages_v_blocks_cta_links, {
      relationName: 'links',
    }),
  }),
);
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
);
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
);
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
);
export const relations__pages_v_blocks_archive = relations(
  _pages_v_blocks_archive,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_archive._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_archive',
    }),
  }),
);
export const relations__pages_v_blocks_courses_archive = relations(
  _pages_v_blocks_courses_archive,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_courses_archive._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_coursesArchive',
    }),
  }),
);
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
);
export const relations__pages_v_blocks_testimonial_testimonials = relations(
  _pages_v_blocks_testimonial_testimonials,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_testimonial, {
      fields: [_pages_v_blocks_testimonial_testimonials._parentID],
      references: [_pages_v_blocks_testimonial.id],
      relationName: 'testimonials',
    }),
  }),
);
export const relations__pages_v_blocks_testimonial = relations(
  _pages_v_blocks_testimonial,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_testimonial._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_testimonial',
    }),
    testimonials: many(_pages_v_blocks_testimonial_testimonials, {
      relationName: 'testimonials',
    }),
  }),
);
export const relations__pages_v_blocks_faq_faqs = relations(
  _pages_v_blocks_faq_faqs,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_faq, {
      fields: [_pages_v_blocks_faq_faqs._parentID],
      references: [_pages_v_blocks_faq.id],
      relationName: 'faqs',
    }),
  }),
);
export const relations__pages_v_blocks_faq = relations(
  _pages_v_blocks_faq,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_faq._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_faq',
    }),
    faqs: many(_pages_v_blocks_faq_faqs, {
      relationName: 'faqs',
    }),
  }),
);
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  coursesID: one(courses, {
    fields: [_pages_v_rels.coursesID],
    references: [courses.id],
    relationName: 'courses',
  }),
}));
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_media: one(media, {
    fields: [_pages_v.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_coursesArchive: many(_pages_v_blocks_courses_archive, {
    relationName: '_blocks_coursesArchive',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  _blocks_testimonial: many(_pages_v_blocks_testimonial, {
    relationName: '_blocks_testimonial',
  }),
  _blocks_faq: many(_pages_v_blocks_faq, {
    relationName: '_blocks_faq',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_posts_populated_authors = relations(
  posts_populated_authors,
  ({ one }) => ({
    _parentID: one(posts, {
      fields: [posts_populated_authors._parentID],
      references: [posts.id],
      relationName: 'populatedAuthors',
    }),
  }),
);
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}));
export const relations_posts = relations(posts, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [posts.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}));
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
);
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}));
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_posts_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_categories_breadcrumbs = relations(
  categories_breadcrumbs,
  ({ one }) => ({
    _parentID: one(categories, {
      fields: [categories_breadcrumbs._parentID],
      references: [categories.id],
      relationName: 'breadcrumbs',
    }),
    doc: one(categories, {
      fields: [categories_breadcrumbs.doc],
      references: [categories.id],
      relationName: 'doc',
    }),
  }),
);
export const relations_categories = relations(categories, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [categories.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [categories.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
}));
export const relations__categories_v_version_breadcrumbs = relations(
  _categories_v_version_breadcrumbs,
  ({ one }) => ({
    _parentID: one(_categories_v, {
      fields: [_categories_v_version_breadcrumbs._parentID],
      references: [_categories_v.id],
      relationName: 'version_breadcrumbs',
    }),
    doc: one(categories, {
      fields: [_categories_v_version_breadcrumbs.doc],
      references: [categories.id],
      relationName: 'doc',
    }),
  }),
);
export const relations__categories_v = relations(
  _categories_v,
  ({ one, many }) => ({
    parent: one(categories, {
      fields: [_categories_v.parent],
      references: [categories.id],
      relationName: 'parent',
    }),
    version_heroImage: one(media, {
      fields: [_categories_v.version_heroImage],
      references: [media.id],
      relationName: 'version_heroImage',
    }),
    version_meta_image: one(media, {
      fields: [_categories_v.version_meta_image],
      references: [media.id],
      relationName: 'version_meta_image',
    }),
    version_parent: one(categories, {
      fields: [_categories_v.version_parent],
      references: [categories.id],
      relationName: 'version_parent',
    }),
    version_breadcrumbs: many(_categories_v_version_breadcrumbs, {
      relationName: 'version_breadcrumbs',
    }),
  }),
);
export const relations_courses_populated_authors = relations(
  courses_populated_authors,
  ({ one }) => ({
    _parentID: one(courses, {
      fields: [courses_populated_authors._parentID],
      references: [courses.id],
      relationName: 'populatedAuthors',
    }),
  }),
);
export const relations_courses_rels = relations(courses_rels, ({ one }) => ({
  parent: one(courses, {
    fields: [courses_rels.parent],
    references: [courses.id],
    relationName: '_rels',
  }),
  modulesID: one(modules, {
    fields: [courses_rels.modulesID],
    references: [modules.id],
    relationName: 'modules',
  }),
  usersID: one(users, {
    fields: [courses_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}));
export const relations_courses = relations(courses, ({ one, many }) => ({
  badgeImage: one(media, {
    fields: [courses.badgeImage],
    references: [media.id],
    relationName: 'badgeImage',
  }),
  heroImage: one(media, {
    fields: [courses.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [courses.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(courses_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(courses_rels, {
    relationName: '_rels',
  }),
}));
export const relations__courses_v_version_populated_authors = relations(
  _courses_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_courses_v, {
      fields: [_courses_v_version_populated_authors._parentID],
      references: [_courses_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
);
export const relations__courses_v_rels = relations(
  _courses_v_rels,
  ({ one }) => ({
    parent: one(_courses_v, {
      fields: [_courses_v_rels.parent],
      references: [_courses_v.id],
      relationName: '_rels',
    }),
    modulesID: one(modules, {
      fields: [_courses_v_rels.modulesID],
      references: [modules.id],
      relationName: 'modules',
    }),
    usersID: one(users, {
      fields: [_courses_v_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
);
export const relations__courses_v = relations(_courses_v, ({ one, many }) => ({
  parent: one(courses, {
    fields: [_courses_v.parent],
    references: [courses.id],
    relationName: 'parent',
  }),
  version_badgeImage: one(media, {
    fields: [_courses_v.version_badgeImage],
    references: [media.id],
    relationName: 'version_badgeImage',
  }),
  version_heroImage: one(media, {
    fields: [_courses_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_meta_image: one(media, {
    fields: [_courses_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_courses_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_courses_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_modules_rels = relations(modules_rels, ({ one }) => ({
  parent: one(modules, {
    fields: [modules_rels.parent],
    references: [modules.id],
    relationName: '_rels',
  }),
  coursesID: one(courses, {
    fields: [modules_rels.coursesID],
    references: [courses.id],
    relationName: 'courses',
  }),
  lessonsID: one(lessons, {
    fields: [modules_rels.lessonsID],
    references: [lessons.id],
    relationName: 'lessons',
  }),
}));
export const relations_modules = relations(modules, ({ many }) => ({
  _rels: many(modules_rels, {
    relationName: '_rels',
  }),
}));
export const relations_lessons_populated_authors = relations(
  lessons_populated_authors,
  ({ one }) => ({
    _parentID: one(lessons, {
      fields: [lessons_populated_authors._parentID],
      references: [lessons.id],
      relationName: 'populatedAuthors',
    }),
  }),
);
export const relations_lessons_rels = relations(lessons_rels, ({ one }) => ({
  parent: one(lessons, {
    fields: [lessons_rels.parent],
    references: [lessons.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [lessons_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}));
export const relations_lessons = relations(lessons, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [lessons.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  course: one(courses, {
    fields: [lessons.course],
    references: [courses.id],
    relationName: 'course',
  }),
  module: one(modules, {
    fields: [lessons.module],
    references: [modules.id],
    relationName: 'module',
  }),
  populatedAuthors: many(lessons_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(lessons_rels, {
    relationName: '_rels',
  }),
}));
export const relations__lessons_v_version_populated_authors = relations(
  _lessons_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_lessons_v, {
      fields: [_lessons_v_version_populated_authors._parentID],
      references: [_lessons_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
);
export const relations__lessons_v_rels = relations(
  _lessons_v_rels,
  ({ one }) => ({
    parent: one(_lessons_v, {
      fields: [_lessons_v_rels.parent],
      references: [_lessons_v.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [_lessons_v_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
);
export const relations__lessons_v = relations(_lessons_v, ({ one, many }) => ({
  parent: one(lessons, {
    fields: [_lessons_v.parent],
    references: [lessons.id],
    relationName: 'parent',
  }),
  version_meta_image: one(media, {
    fields: [_lessons_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_course: one(courses, {
    fields: [_lessons_v.version_course],
    references: [courses.id],
    relationName: 'version_course',
  }),
  version_module: one(modules, {
    fields: [_lessons_v.version_module],
    references: [modules.id],
    relationName: 'version_module',
  }),
  version_populatedAuthors: many(_lessons_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_lessons_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_course_progress_rels = relations(
  course_progress_rels,
  ({ one }) => ({
    parent: one(course_progress, {
      fields: [course_progress_rels.parent],
      references: [course_progress.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [course_progress_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    coursesID: one(courses, {
      fields: [course_progress_rels.coursesID],
      references: [courses.id],
      relationName: 'courses',
    }),
    'module-progressID': one(module_progress, {
      fields: [course_progress_rels['module-progressID']],
      references: [module_progress.id],
      relationName: 'module-progress',
    }),
    lessonsID: one(lessons, {
      fields: [course_progress_rels.lessonsID],
      references: [lessons.id],
      relationName: 'lessons',
    }),
  }),
);
export const relations_course_progress = relations(
  course_progress,
  ({ many }) => ({
    _rels: many(course_progress_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_module_progress_rels = relations(
  module_progress_rels,
  ({ one }) => ({
    parent: one(module_progress, {
      fields: [module_progress_rels.parent],
      references: [module_progress.id],
      relationName: '_rels',
    }),
    modulesID: one(modules, {
      fields: [module_progress_rels.modulesID],
      references: [modules.id],
      relationName: 'modules',
    }),
    'lesson-progressID': one(lesson_progress, {
      fields: [module_progress_rels['lesson-progressID']],
      references: [lesson_progress.id],
      relationName: 'lesson-progress',
    }),
  }),
);
export const relations_module_progress = relations(
  module_progress,
  ({ many }) => ({
    _rels: many(module_progress_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_lesson_progress_rels = relations(
  lesson_progress_rels,
  ({ one }) => ({
    parent: one(lesson_progress, {
      fields: [lesson_progress_rels.parent],
      references: [lesson_progress.id],
      relationName: '_rels',
    }),
    lessonsID: one(lessons, {
      fields: [lesson_progress_rels.lessonsID],
      references: [lessons.id],
      relationName: 'lessons',
    }),
  }),
);
export const relations_lesson_progress = relations(
  lesson_progress,
  ({ many }) => ({
    _rels: many(lesson_progress_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_favorites = relations(favorites, ({ one }) => ({
  user: one(users, {
    fields: [favorites.user],
    references: [users.id],
    relationName: 'user',
  }),
}));
export const relations_transactions_rels = relations(
  transactions_rels,
  ({ one }) => ({
    parent: one(transactions, {
      fields: [transactions_rels.parent],
      references: [transactions.id],
      relationName: '_rels',
    }),
    coursesID: one(courses, {
      fields: [transactions_rels.coursesID],
      references: [courses.id],
      relationName: 'courses',
    }),
  }),
);
export const relations_transactions = relations(
  transactions,
  ({ one, many }) => ({
    user: one(users, {
      fields: [transactions.user],
      references: [users.id],
      relationName: 'user',
    }),
    _rels: many(transactions_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_newsletter_signups = relations(
  newsletter_signups,
  () => ({}),
);
export const relations_users_roles = relations(users_roles, ({ one }) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: 'roles',
  }),
}));
export const relations_users = relations(users, ({ one, many }) => ({
  roles: many(users_roles, {
    relationName: 'roles',
  }),
  avatar: one(media, {
    fields: [users.avatar],
    references: [media.id],
    relationName: 'avatar',
  }),
  settings: one(settings, {
    fields: [users.settings],
    references: [settings.id],
    relationName: 'settings',
  }),
}));
export const relations_settings = relations(settings, ({ one }) => ({
  user: one(users, {
    fields: [settings.user],
    references: [users.id],
    relationName: 'user',
  }),
}));
export const relations_redirects_rels = relations(
  redirects_rels,
  ({ one }) => ({
    parent: one(redirects, {
      fields: [redirects_rels.parent],
      references: [redirects.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [redirects_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [redirects_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    coursesID: one(courses, {
      fields: [redirects_rels.coursesID],
      references: [courses.id],
      relationName: 'courses',
    }),
    lessonsID: one(lessons, {
      fields: [redirects_rels.lessonsID],
      references: [lessons.id],
      relationName: 'lessons',
    }),
  }),
);
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}));
export const relations_forms_blocks_checkbox = relations(
  forms_blocks_checkbox,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_checkbox._parentID],
      references: [forms.id],
      relationName: '_blocks_checkbox',
    }),
  }),
);
export const relations_forms_blocks_country = relations(
  forms_blocks_country,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_country._parentID],
      references: [forms.id],
      relationName: '_blocks_country',
    }),
  }),
);
export const relations_forms_blocks_email = relations(
  forms_blocks_email,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_email._parentID],
      references: [forms.id],
      relationName: '_blocks_email',
    }),
  }),
);
export const relations_forms_blocks_message = relations(
  forms_blocks_message,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_message._parentID],
      references: [forms.id],
      relationName: '_blocks_message',
    }),
  }),
);
export const relations_forms_blocks_number = relations(
  forms_blocks_number,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_number._parentID],
      references: [forms.id],
      relationName: '_blocks_number',
    }),
  }),
);
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
);
export const relations_forms_blocks_select = relations(
  forms_blocks_select,
  ({ one, many }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_select._parentID],
      references: [forms.id],
      relationName: '_blocks_select',
    }),
    options: many(forms_blocks_select_options, {
      relationName: 'options',
    }),
  }),
);
export const relations_forms_blocks_state = relations(
  forms_blocks_state,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_state._parentID],
      references: [forms.id],
      relationName: '_blocks_state',
    }),
  }),
);
export const relations_forms_blocks_text = relations(
  forms_blocks_text,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_text._parentID],
      references: [forms.id],
      relationName: '_blocks_text',
    }),
  }),
);
export const relations_forms_blocks_textarea = relations(
  forms_blocks_textarea,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_textarea._parentID],
      references: [forms.id],
      relationName: '_blocks_textarea',
    }),
  }),
);
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}));
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}));
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
);
export const relations_form_submissions = relations(
  form_submissions,
  ({ one, many }) => ({
    form: one(forms, {
      fields: [form_submissions.form],
      references: [forms.id],
      relationName: 'form',
    }),
    submissionData: many(form_submissions_submission_data, {
      relationName: 'submissionData',
    }),
  }),
);
export const relations_search_categories = relations(
  search_categories,
  ({ one }) => ({
    _parentID: one(search, {
      fields: [search_categories._parentID],
      references: [search.id],
      relationName: 'categories',
    }),
  }),
);
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}));
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    coursesID: one(courses, {
      fields: [payload_locked_documents_rels.coursesID],
      references: [courses.id],
      relationName: 'courses',
    }),
    modulesID: one(modules, {
      fields: [payload_locked_documents_rels.modulesID],
      references: [modules.id],
      relationName: 'modules',
    }),
    lessonsID: one(lessons, {
      fields: [payload_locked_documents_rels.lessonsID],
      references: [lessons.id],
      relationName: 'lessons',
    }),
    'course-progressID': one(course_progress, {
      fields: [payload_locked_documents_rels['course-progressID']],
      references: [course_progress.id],
      relationName: 'course-progress',
    }),
    'module-progressID': one(module_progress, {
      fields: [payload_locked_documents_rels['module-progressID']],
      references: [module_progress.id],
      relationName: 'module-progress',
    }),
    'lesson-progressID': one(lesson_progress, {
      fields: [payload_locked_documents_rels['lesson-progressID']],
      references: [lesson_progress.id],
      relationName: 'lesson-progress',
    }),
    favoritesID: one(favorites, {
      fields: [payload_locked_documents_rels.favoritesID],
      references: [favorites.id],
      relationName: 'favorites',
    }),
    transactionsID: one(transactions, {
      fields: [payload_locked_documents_rels.transactionsID],
      references: [transactions.id],
      relationName: 'transactions',
    }),
    'newsletter-signupsID': one(newsletter_signups, {
      fields: [payload_locked_documents_rels['newsletter-signupsID']],
      references: [newsletter_signups.id],
      relationName: 'newsletter-signups',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    settingsID: one(settings, {
      fields: [payload_locked_documents_rels.settingsID],
      references: [settings.id],
      relationName: 'settings',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);
export const relations_header_nav_items = relations(
  header_nav_items,
  ({ one }) => ({
    _parentID: one(header, {
      fields: [header_nav_items._parentID],
      references: [header.id],
      relationName: 'navItems',
    }),
  }),
);
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}));
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}));
export const relations_footer_pt_nav_items = relations(
  footer_pt_nav_items,
  ({ one }) => ({
    _parentID: one(footer_pt, {
      fields: [footer_pt_nav_items._parentID],
      references: [footer_pt.id],
      relationName: 'navItems',
    }),
  }),
);
export const relations_footer_pt_rels = relations(
  footer_pt_rels,
  ({ one }) => ({
    parent: one(footer_pt, {
      fields: [footer_pt_rels.parent],
      references: [footer_pt.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [footer_pt_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
  }),
);
export const relations_footer_pt = relations(footer_pt, ({ many }) => ({
  navItems: many(footer_pt_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_pt_rels, {
    relationName: '_rels',
  }),
}));
export const relations_footer_en_nav_items = relations(
  footer_en_nav_items,
  ({ one }) => ({
    _parentID: one(footer_en, {
      fields: [footer_en_nav_items._parentID],
      references: [footer_en.id],
      relationName: 'navItems',
    }),
  }),
);
export const relations_footer_en_rels = relations(
  footer_en_rels,
  ({ one }) => ({
    parent: one(footer_en, {
      fields: [footer_en_rels.parent],
      references: [footer_en.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [footer_en_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
  }),
);
export const relations_footer_en = relations(footer_en, ({ many }) => ({
  navItems: many(footer_en_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_en_rels, {
    relationName: '_rels',
  }),
}));
export const relations_footer_fr_nav_items = relations(
  footer_fr_nav_items,
  ({ one }) => ({
    _parentID: one(footer_fr, {
      fields: [footer_fr_nav_items._parentID],
      references: [footer_fr.id],
      relationName: 'navItems',
    }),
  }),
);
export const relations_footer_fr_rels = relations(
  footer_fr_rels,
  ({ one }) => ({
    parent: one(footer_fr, {
      fields: [footer_fr_rels.parent],
      references: [footer_fr.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [footer_fr_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
  }),
);
export const relations_footer_fr = relations(footer_fr, ({ many }) => ({
  navItems: many(footer_fr_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_fr_rels, {
    relationName: '_rels',
  }),
}));
export const relations_footer_es_nav_items = relations(
  footer_es_nav_items,
  ({ one }) => ({
    _parentID: one(footer_es, {
      fields: [footer_es_nav_items._parentID],
      references: [footer_es.id],
      relationName: 'navItems',
    }),
  }),
);
export const relations_footer_es_rels = relations(
  footer_es_rels,
  ({ one }) => ({
    parent: one(footer_es, {
      fields: [footer_es_rels.parent],
      references: [footer_es.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [footer_es_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
  }),
);
export const relations_footer_es = relations(footer_es, ({ many }) => ({
  navItems: many(footer_es_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_es_rels, {
    relationName: '_rels',
  }),
}));

type DatabaseSchema = {
  enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type;
  enum_pages_hero_links_link_appearance: typeof enum_pages_hero_links_link_appearance;
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type;
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance;
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size;
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type;
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance;
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by;
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to;
  enum_pages_language: typeof enum_pages_language;
  enum_pages_hero_type: typeof enum_pages_hero_type;
  enum_pages_status: typeof enum_pages_status;
  enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type;
  enum__pages_v_version_hero_links_link_appearance: typeof enum__pages_v_version_hero_links_link_appearance;
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type;
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance;
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size;
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type;
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance;
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by;
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to;
  enum__pages_v_version_language: typeof enum__pages_v_version_language;
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type;
  enum__pages_v_version_status: typeof enum__pages_v_version_status;
  enum_posts_language: typeof enum_posts_language;
  enum_posts_status: typeof enum_posts_status;
  enum__posts_v_version_language: typeof enum__posts_v_version_language;
  enum__posts_v_version_status: typeof enum__posts_v_version_status;
  enum_categories_language: typeof enum_categories_language;
  enum_categories_status: typeof enum_categories_status;
  enum__categories_v_version_language: typeof enum__categories_v_version_language;
  enum__categories_v_version_status: typeof enum__categories_v_version_status;
  enum_courses_language: typeof enum_courses_language;
  enum_courses_status: typeof enum_courses_status;
  enum__courses_v_version_language: typeof enum__courses_v_version_language;
  enum__courses_v_version_status: typeof enum__courses_v_version_status;
  enum_lessons_status: typeof enum_lessons_status;
  enum__lessons_v_version_status: typeof enum__lessons_v_version_status;
  enum_course_progress_status: typeof enum_course_progress_status;
  enum_favorites_object_type: typeof enum_favorites_object_type;
  enum_transactions_provider: typeof enum_transactions_provider;
  enum_transactions_status: typeof enum_transactions_status;
  enum_users_roles: typeof enum_users_roles;
  enum_settings_preferences_theme: typeof enum_settings_preferences_theme;
  enum_settings_preferences_language: typeof enum_settings_preferences_language;
  enum_redirects_to_type: typeof enum_redirects_to_type;
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type;
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type;
  enum_footer_pt_nav_items_link_type: typeof enum_footer_pt_nav_items_link_type;
  enum_footer_en_nav_items_link_type: typeof enum_footer_en_nav_items_link_type;
  enum_footer_fr_nav_items_link_type: typeof enum_footer_fr_nav_items_link_type;
  enum_footer_es_nav_items_link_type: typeof enum_footer_es_nav_items_link_type;
  pages_hero_links: typeof pages_hero_links;
  pages_blocks_cta_links: typeof pages_blocks_cta_links;
  pages_blocks_cta: typeof pages_blocks_cta;
  pages_blocks_content_columns: typeof pages_blocks_content_columns;
  pages_blocks_content: typeof pages_blocks_content;
  pages_blocks_media_block: typeof pages_blocks_media_block;
  pages_blocks_archive: typeof pages_blocks_archive;
  pages_blocks_courses_archive: typeof pages_blocks_courses_archive;
  pages_blocks_form_block: typeof pages_blocks_form_block;
  pages_blocks_testimonial_testimonials: typeof pages_blocks_testimonial_testimonials;
  pages_blocks_testimonial: typeof pages_blocks_testimonial;
  pages_blocks_faq_faqs: typeof pages_blocks_faq_faqs;
  pages_blocks_faq: typeof pages_blocks_faq;
  pages: typeof pages;
  pages_rels: typeof pages_rels;
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links;
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links;
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta;
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns;
  _pages_v_blocks_content: typeof _pages_v_blocks_content;
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block;
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive;
  _pages_v_blocks_courses_archive: typeof _pages_v_blocks_courses_archive;
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block;
  _pages_v_blocks_testimonial_testimonials: typeof _pages_v_blocks_testimonial_testimonials;
  _pages_v_blocks_testimonial: typeof _pages_v_blocks_testimonial;
  _pages_v_blocks_faq_faqs: typeof _pages_v_blocks_faq_faqs;
  _pages_v_blocks_faq: typeof _pages_v_blocks_faq;
  _pages_v: typeof _pages_v;
  _pages_v_rels: typeof _pages_v_rels;
  posts_populated_authors: typeof posts_populated_authors;
  posts: typeof posts;
  posts_rels: typeof posts_rels;
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors;
  _posts_v: typeof _posts_v;
  _posts_v_rels: typeof _posts_v_rels;
  media: typeof media;
  categories_breadcrumbs: typeof categories_breadcrumbs;
  categories: typeof categories;
  _categories_v_version_breadcrumbs: typeof _categories_v_version_breadcrumbs;
  _categories_v: typeof _categories_v;
  courses_populated_authors: typeof courses_populated_authors;
  courses: typeof courses;
  courses_rels: typeof courses_rels;
  _courses_v_version_populated_authors: typeof _courses_v_version_populated_authors;
  _courses_v: typeof _courses_v;
  _courses_v_rels: typeof _courses_v_rels;
  modules: typeof modules;
  modules_rels: typeof modules_rels;
  lessons_populated_authors: typeof lessons_populated_authors;
  lessons: typeof lessons;
  lessons_rels: typeof lessons_rels;
  _lessons_v_version_populated_authors: typeof _lessons_v_version_populated_authors;
  _lessons_v: typeof _lessons_v;
  _lessons_v_rels: typeof _lessons_v_rels;
  course_progress: typeof course_progress;
  course_progress_rels: typeof course_progress_rels;
  module_progress: typeof module_progress;
  module_progress_rels: typeof module_progress_rels;
  lesson_progress: typeof lesson_progress;
  lesson_progress_rels: typeof lesson_progress_rels;
  favorites: typeof favorites;
  transactions: typeof transactions;
  transactions_rels: typeof transactions_rels;
  newsletter_signups: typeof newsletter_signups;
  users_roles: typeof users_roles;
  users: typeof users;
  settings: typeof settings;
  redirects: typeof redirects;
  redirects_rels: typeof redirects_rels;
  forms_blocks_checkbox: typeof forms_blocks_checkbox;
  forms_blocks_country: typeof forms_blocks_country;
  forms_blocks_email: typeof forms_blocks_email;
  forms_blocks_message: typeof forms_blocks_message;
  forms_blocks_number: typeof forms_blocks_number;
  forms_blocks_select_options: typeof forms_blocks_select_options;
  forms_blocks_select: typeof forms_blocks_select;
  forms_blocks_state: typeof forms_blocks_state;
  forms_blocks_text: typeof forms_blocks_text;
  forms_blocks_textarea: typeof forms_blocks_textarea;
  forms_emails: typeof forms_emails;
  forms: typeof forms;
  form_submissions_submission_data: typeof form_submissions_submission_data;
  form_submissions: typeof form_submissions;
  search_categories: typeof search_categories;
  search: typeof search;
  search_rels: typeof search_rels;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  header_nav_items: typeof header_nav_items;
  header: typeof header;
  header_rels: typeof header_rels;
  footer_pt_nav_items: typeof footer_pt_nav_items;
  footer_pt: typeof footer_pt;
  footer_pt_rels: typeof footer_pt_rels;
  footer_en_nav_items: typeof footer_en_nav_items;
  footer_en: typeof footer_en;
  footer_en_rels: typeof footer_en_rels;
  footer_fr_nav_items: typeof footer_fr_nav_items;
  footer_fr: typeof footer_fr;
  footer_fr_rels: typeof footer_fr_rels;
  footer_es_nav_items: typeof footer_es_nav_items;
  footer_es: typeof footer_es;
  footer_es_rels: typeof footer_es_rels;
  relations_pages_hero_links: typeof relations_pages_hero_links;
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links;
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta;
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns;
  relations_pages_blocks_content: typeof relations_pages_blocks_content;
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block;
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive;
  relations_pages_blocks_courses_archive: typeof relations_pages_blocks_courses_archive;
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block;
  relations_pages_blocks_testimonial_testimonials: typeof relations_pages_blocks_testimonial_testimonials;
  relations_pages_blocks_testimonial: typeof relations_pages_blocks_testimonial;
  relations_pages_blocks_faq_faqs: typeof relations_pages_blocks_faq_faqs;
  relations_pages_blocks_faq: typeof relations_pages_blocks_faq;
  relations_pages_rels: typeof relations_pages_rels;
  relations_pages: typeof relations_pages;
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links;
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links;
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta;
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns;
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content;
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block;
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive;
  relations__pages_v_blocks_courses_archive: typeof relations__pages_v_blocks_courses_archive;
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block;
  relations__pages_v_blocks_testimonial_testimonials: typeof relations__pages_v_blocks_testimonial_testimonials;
  relations__pages_v_blocks_testimonial: typeof relations__pages_v_blocks_testimonial;
  relations__pages_v_blocks_faq_faqs: typeof relations__pages_v_blocks_faq_faqs;
  relations__pages_v_blocks_faq: typeof relations__pages_v_blocks_faq;
  relations__pages_v_rels: typeof relations__pages_v_rels;
  relations__pages_v: typeof relations__pages_v;
  relations_posts_populated_authors: typeof relations_posts_populated_authors;
  relations_posts_rels: typeof relations_posts_rels;
  relations_posts: typeof relations_posts;
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors;
  relations__posts_v_rels: typeof relations__posts_v_rels;
  relations__posts_v: typeof relations__posts_v;
  relations_media: typeof relations_media;
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs;
  relations_categories: typeof relations_categories;
  relations__categories_v_version_breadcrumbs: typeof relations__categories_v_version_breadcrumbs;
  relations__categories_v: typeof relations__categories_v;
  relations_courses_populated_authors: typeof relations_courses_populated_authors;
  relations_courses_rels: typeof relations_courses_rels;
  relations_courses: typeof relations_courses;
  relations__courses_v_version_populated_authors: typeof relations__courses_v_version_populated_authors;
  relations__courses_v_rels: typeof relations__courses_v_rels;
  relations__courses_v: typeof relations__courses_v;
  relations_modules_rels: typeof relations_modules_rels;
  relations_modules: typeof relations_modules;
  relations_lessons_populated_authors: typeof relations_lessons_populated_authors;
  relations_lessons_rels: typeof relations_lessons_rels;
  relations_lessons: typeof relations_lessons;
  relations__lessons_v_version_populated_authors: typeof relations__lessons_v_version_populated_authors;
  relations__lessons_v_rels: typeof relations__lessons_v_rels;
  relations__lessons_v: typeof relations__lessons_v;
  relations_course_progress_rels: typeof relations_course_progress_rels;
  relations_course_progress: typeof relations_course_progress;
  relations_module_progress_rels: typeof relations_module_progress_rels;
  relations_module_progress: typeof relations_module_progress;
  relations_lesson_progress_rels: typeof relations_lesson_progress_rels;
  relations_lesson_progress: typeof relations_lesson_progress;
  relations_favorites: typeof relations_favorites;
  relations_transactions_rels: typeof relations_transactions_rels;
  relations_transactions: typeof relations_transactions;
  relations_newsletter_signups: typeof relations_newsletter_signups;
  relations_users_roles: typeof relations_users_roles;
  relations_users: typeof relations_users;
  relations_settings: typeof relations_settings;
  relations_redirects_rels: typeof relations_redirects_rels;
  relations_redirects: typeof relations_redirects;
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox;
  relations_forms_blocks_country: typeof relations_forms_blocks_country;
  relations_forms_blocks_email: typeof relations_forms_blocks_email;
  relations_forms_blocks_message: typeof relations_forms_blocks_message;
  relations_forms_blocks_number: typeof relations_forms_blocks_number;
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options;
  relations_forms_blocks_select: typeof relations_forms_blocks_select;
  relations_forms_blocks_state: typeof relations_forms_blocks_state;
  relations_forms_blocks_text: typeof relations_forms_blocks_text;
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea;
  relations_forms_emails: typeof relations_forms_emails;
  relations_forms: typeof relations_forms;
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data;
  relations_form_submissions: typeof relations_form_submissions;
  relations_search_categories: typeof relations_search_categories;
  relations_search_rels: typeof relations_search_rels;
  relations_search: typeof relations_search;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_header_nav_items: typeof relations_header_nav_items;
  relations_header_rels: typeof relations_header_rels;
  relations_header: typeof relations_header;
  relations_footer_pt_nav_items: typeof relations_footer_pt_nav_items;
  relations_footer_pt_rels: typeof relations_footer_pt_rels;
  relations_footer_pt: typeof relations_footer_pt;
  relations_footer_en_nav_items: typeof relations_footer_en_nav_items;
  relations_footer_en_rels: typeof relations_footer_en_rels;
  relations_footer_en: typeof relations_footer_en;
  relations_footer_fr_nav_items: typeof relations_footer_fr_nav_items;
  relations_footer_fr_rels: typeof relations_footer_fr_rels;
  relations_footer_fr: typeof relations_footer_fr;
  relations_footer_es_nav_items: typeof relations_footer_es_nav_items;
  relations_footer_es_rels: typeof relations_footer_es_rels;
  relations_footer_es: typeof relations_footer_es;
};

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
